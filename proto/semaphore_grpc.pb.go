// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: semaphore.proto

package semaphore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Semaphore_Acquire_FullMethodName = "/semaphore.Semaphore/Acquire"
	Semaphore_Release_FullMethodName = "/semaphore.Semaphore/Release"
)

// SemaphoreClient is the client API for Semaphore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SemaphoreClient interface {
	Acquire(ctx context.Context, in *AcquireRequest, opts ...grpc.CallOption) (*AcquireResponse, error)
	Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseResponse, error)
}

type semaphoreClient struct {
	cc grpc.ClientConnInterface
}

func NewSemaphoreClient(cc grpc.ClientConnInterface) SemaphoreClient {
	return &semaphoreClient{cc}
}

func (c *semaphoreClient) Acquire(ctx context.Context, in *AcquireRequest, opts ...grpc.CallOption) (*AcquireResponse, error) {
	out := new(AcquireResponse)
	err := c.cc.Invoke(ctx, Semaphore_Acquire_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *semaphoreClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseResponse, error) {
	out := new(ReleaseResponse)
	err := c.cc.Invoke(ctx, Semaphore_Release_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SemaphoreServer is the server API for Semaphore service.
// All implementations must embed UnimplementedSemaphoreServer
// for forward compatibility
type SemaphoreServer interface {
	Acquire(context.Context, *AcquireRequest) (*AcquireResponse, error)
	Release(context.Context, *ReleaseRequest) (*ReleaseResponse, error)
	mustEmbedUnimplementedSemaphoreServer()
}

// UnimplementedSemaphoreServer must be embedded to have forward compatible implementations.
type UnimplementedSemaphoreServer struct {
}

func (UnimplementedSemaphoreServer) Acquire(context.Context, *AcquireRequest) (*AcquireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acquire not implemented")
}
func (UnimplementedSemaphoreServer) Release(context.Context, *ReleaseRequest) (*ReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedSemaphoreServer) mustEmbedUnimplementedSemaphoreServer() {}

// UnsafeSemaphoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SemaphoreServer will
// result in compilation errors.
type UnsafeSemaphoreServer interface {
	mustEmbedUnimplementedSemaphoreServer()
}

func RegisterSemaphoreServer(s grpc.ServiceRegistrar, srv SemaphoreServer) {
	s.RegisterService(&Semaphore_ServiceDesc, srv)
}

func _Semaphore_Acquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemaphoreServer).Acquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Semaphore_Acquire_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemaphoreServer).Acquire(ctx, req.(*AcquireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Semaphore_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemaphoreServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Semaphore_Release_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemaphoreServer).Release(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Semaphore_ServiceDesc is the grpc.ServiceDesc for Semaphore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Semaphore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "semaphore.Semaphore",
	HandlerType: (*SemaphoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Acquire",
			Handler:    _Semaphore_Acquire_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _Semaphore_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "semaphore.proto",
}
